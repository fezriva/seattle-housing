}
sd12_houses_nn_1hl <- vector(mode = "list", lenght = 8)
sd12_houses_nn_1hl <- vector(mode = "list", length = 8)
for(i in c(1:8)) {
sd12_houses_nn_1hl[i] <- neuralnet(sd12_houses_formula, hidden = i, data = training_sd12_houses_minmax, stepmax = 1e7)
val_sd12_houses_nn_1hl <- compute(sd12_houses_nn_1hl, val_sd12_houses_minmax[,-c(1,17)])
val_weights_1hl <- val_sd12_houses_nn_1hl$net.result
idx_1hl <- apply(val_weights_1hl, 1, which.max)
val_1hl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_1hl]
val_dataframe <- data.frame(
actual = val_sd12_houses_minmax$zipcode,
nn_1hl = val_1hl
)
val_results[i] <- cor(val_dataframe[,'actual'], val_dataframe[,'nn_1hl'])
print(c(i,':',val_results[i]))
}
# train a neural network with 5 nodes on one hidden layer
#   note: the number of layers is set with the hidden option parameter
val_results <- rep(0, times = 8)
for(i in c(1:8)) {
sd12_houses_nn_1hl <- neuralnet(sd12_houses_formula, hidden = i, data = training_sd12_houses_minmax, stepmax = 1e7)
val_sd12_houses_nn_1hl <- compute(sd12_houses_nn_1hl, val_sd12_houses_minmax[,-c(1,17)])
val_weights_1hl <- val_sd12_houses_nn_1hl$net.result
idx_1hl <- apply(val_weights_1hl, 1, which.max)
val_1hl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_1hl]
val_dataframe <- data.frame(
actual = val_sd12_houses_minmax$zipcode,
nn_1hl = val_1hl
)
val_results[i] <- cor(val_dataframe[,'actual'], val_dataframe[,'nn_1hl'])
print(c(i,':',val_results[i]))
}
# highest correlation found at 6 hidden layers
sd12_houses_nn_1hl <- neuralnet(sd12_houses_formula, hidden = 6, data = training_sd12_houses_minmax, stepmax = 1e7)
val_sd12_houses_nn_1hl <- compute(sd12_houses_nn_1hl, val_sd12_houses_minmax[,-c(1,17)])
val_weights_1hl <- val_sd12_houses_nn_1hl$net.result
idx_1hl <- apply(val_weights_1hl, 1, which.max)
val_1hl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_1hl]
val_dataframe <- data.frame(
actual = val_sd12_houses_minmax$zipcode,
nn_1hl = val_1hl
)
cor(val_dataframe[,'actual'], val_dataframe[,'nn_1hl'])
# highest correlation found at 6 hidden layers
sd12_houses_nn_1hl <- neuralnet(sd12_houses_formula, hidden = 6, data = training_sd12_houses_minmax, stepmax = 1e7)
val_sd12_houses_nn_1hl <- compute(sd12_houses_nn_1hl, val_sd12_houses_minmax[,-c(1,17)])
val_weights_1hl <- val_sd12_houses_nn_1hl$net.result
idx_1hl <- apply(val_weights_1hl, 1, which.max)
val_1hl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_1hl]
val_dataframe <- data.frame(
actual = val_sd12_houses_minmax$zipcode,
nn_1hl = val_1hl
)
cor(val_dataframe[,'actual'], val_dataframe[,'nn_1hl'])
# highest correlation found at 6 hidden layers
sd12_houses_nn_1hl <- neuralnet(sd12_houses_formula, hidden = 6, data = training_sd12_houses_minmax, stepmax = 1e7)
val_sd12_houses_nn_1hl <- compute(sd12_houses_nn_1hl, val_sd12_houses_minmax[,-c(1,17)])
val_weights_1hl <- val_sd12_houses_nn_1hl$net.result
idx_1hl <- apply(val_weights_1hl, 1, which.max)
val_1hl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_1hl]
val_dataframe <- data.frame(
actual = val_sd12_houses_minmax$zipcode,
nn_1hl = val_1hl
)
cor(val_dataframe[,'actual'], val_dataframe[,'nn_1hl'])
# compute the prediction for each neural network
#   note: the strength attribute (column 9) is excluded from the test data set
pred_sd12_houses_nn_Nohl <- compute(sd12_houses_nn_Nohl, test_sd12_houses_minmax[,-c(1,17)])
pred_sd12_houses_nn_1hl <- compute(sd12_houses_nn_1hl, test_sd12_houses_minmax[,-c(1,17)])
# create a table with actual values and the three predictions
#   note: predicted values are stored as net_result attribute of the prediction object
pred_weights_Nohl <- pred_sd12_houses_nn_Nohl$net.result
idx_Nohl <- apply(pred_weights_Nohl, 1, which.max)
pred_Nohl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_Nohl]
pred_weights_1hl <- pred_sd12_houses_nn_1hl$net.result
idx_1hl <- apply(pred_weights_1hl, 1, which.max)
pred_1hl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_1hl]
sd12_houses_nn_results <- data.frame(
actual = test_sd12_houses_minmax$zipcode,
nn_Nohl = pred_Nohl,
nn_1hl = pred_1hl
)
# calculate the correlation between actual and predicted values to identify the best predictor
cor(sd12_houses_nn_results[,'actual'], sd12_houses_nn_results[,c("nn_Nohl","nn_1hl")])
table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)
# nn with no hidden layers
sd12_houses_nn_Nohl <- neuralnet(sd12_houses_formula, data = training_sd12_houses_minmax)
# compute the prediction for each neural network
#   note: the strength attribute (column 9) is excluded from the test data set
pred_sd12_houses_nn_Nohl <- compute(sd12_houses_nn_Nohl, test_sd12_houses_minmax[,-c(1,17)])
pred_sd12_houses_nn_1hl <- compute(sd12_houses_nn_1hl, test_sd12_houses_minmax[,-c(1,17)])
# create a table with actual values and the three predictions
#   note: predicted values are stored as net_result attribute of the prediction object
pred_weights_Nohl <- pred_sd12_houses_nn_Nohl$net.result
idx_Nohl <- apply(pred_weights_Nohl, 1, which.max)
pred_Nohl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_Nohl]
pred_weights_1hl <- pred_sd12_houses_nn_1hl$net.result
idx_1hl <- apply(pred_weights_1hl, 1, which.max)
pred_1hl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_1hl]
sd12_houses_nn_results <- data.frame(
actual = test_sd12_houses_minmax$zipcode,
nn_Nohl = pred_Nohl,
nn_1hl = pred_1hl
)
# calculate the correlation between actual and predicted values to identify the best predictor
cor(sd12_houses_nn_results[,'actual'], sd12_houses_nn_results[,c("nn_Nohl","nn_1hl")])
table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)
table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)
# compute the prediction for each neural network
#   note: the strength attribute (column 9) is excluded from the test data set
pred_sd12_houses_nn_Nohl <- compute(sd12_houses_nn_Nohl, test_sd12_houses_minmax[,-c(1,17)])
pred_sd12_houses_nn_1hl <- compute(sd12_houses_nn_1hl, test_sd12_houses_minmax[,-c(1,17)])
# create a table with actual values and the three predictions
#   note: predicted values are stored as net_result attribute of the prediction object
pred_weights_Nohl <- pred_sd12_houses_nn_Nohl$net.result
idx_Nohl <- apply(pred_weights_Nohl, 1, which.max)
pred_Nohl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_Nohl]
pred_weights_1hl <- pred_sd12_houses_nn_1hl$net.result
idx_1hl <- apply(pred_weights_1hl, 1, which.max)
pred_1hl <- c(98118, 98126, 98116, 98106, 98136, 98144, 98108)[idx_1hl]
sd12_houses_nn_results <- data.frame(
actual = test_sd12_houses_minmax$zipcode,
nn_Nohl = pred_Nohl,
nn_1hl = pred_1hl
)
# calculate the correlation between actual and predicted values to identify the best predictor
cor(sd12_houses_nn_results[,'actual'], sd12_houses_nn_results[,c("nn_Nohl","nn_1hl")])
table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)
table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)
# plot actual vs predicted values for the worst (blue) and best predictor (orange)
#   note: points is used to add points on a graph
opar <- par()
plot(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_1hl,
col = 'steelblue2',
xlab = 'actual zipcode',
ylab = 'predicted zipcode',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)/25
)
points(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_Nohl,
col = 'orange',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)/50
)
abline(a = 0, b = 1, col = 'red', lty = 'dashed')
legend(
'bottomright',
c('nn_Nohl', 'nn_1hl'),
pch = 20,
col = c('steelblue2', 'orange'),
bty = 'n',
horiz = TRUE
)
par(opar)
# plot actual vs predicted values for the worst (blue) and best predictor (orange)
#   note: points is used to add points on a graph
opar <- par()
plot(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_1hl,
col = 'steelblue2',
xlab = 'actual zipcode',
ylab = 'predicted zipcode',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)/25
)
points(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_Nohl,
col = 'orange',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)/50
)
abline(a = 0, b = 1, col = 'red', lty = 'dashed')
legend(
'bottomright',
c('nn_1hl', 'nn_Nohl'),
pch = 20,
col = c('steelblue2', 'orange'),
bty = 'n',
horiz = TRUE
)
par(opar)
# set random seed
set.seed(2018)
sd12_houses_nOut$zipcode <- as.factor(sd12_houses_nOut$zipcode)
# create a 70/30 training/test set split
n_rows <- nrow(sd12_houses_nOut)
# sample 70% (n_rows * 0.7) indices in the ranges 1:nrows
training_idx_tree <- sample(n_rows, n_rows * 0.7)
# filter the data frame with the training indices (and the complement)
training_sd12_houses_tree <- sd12_houses_nOut[training_idx_tree,]
test_sd12_houses_tree <- sd12_houses_nOut[-training_idx_tree,]
# define a formula for predicting Sales
sd12_houses_tree_formula = zipcode ~ date + price + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + sqft_living15 + sqft_lot15 + pt_stops + crimes
# train a decision tree
tree_sd12_houses <- tree(sd12_houses_tree_formula, data = training_sd12_houses_tree)
# inspect the tree
summary(tree_sd12_houses)
# plot the tree
plot(tree_sd12_houses)
text(tree_sd12_houses, pretty = 0)
sd12_houses_nOut$zipcode <- as.factor(sd12_houses_nOut$zipcode)
# create a 70/30 training/test set split
n_rows <- nrow(sd12_houses_nOut)
# sample 70% (n_rows * 0.7) indices in the ranges 1:nrows
training_idx_tree <- sample(n_rows, n_rows * 0.7)
# filter the data frame with the training indices (and the complement)
training_sd12_houses_tree <- sd12_houses_nOut[training_idx_tree,]
test_sd12_houses_tree <- sd12_houses_nOut[-training_idx_tree,]
# define a formula for predicting Sales
sd12_houses_tree_formula = zipcode ~ date + price + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + sqft_living15 + sqft_lot15 + pt_stops + crimes
# train a decision tree
tree_sd12_houses <- tree(sd12_houses_tree_formula, data = training_sd12_houses_tree)
library(tree)
# train a decision tree
tree_sd12_houses <- tree(sd12_houses_tree_formula, data = training_sd12_houses_tree)
# inspect the tree
summary(tree_sd12_houses)
# plot the tree
plot(tree_sd12_houses)
text(tree_sd12_houses, pretty = 0)
# prune the tree using cross-validation
cv_sd12_houses <- cv.tree(tree_sd12_houses, FUN=prune.misclass)
# create a table of tree size and classification error
#   note: the cross-validation object has an attribute dev for the classification error
#     you can check the attribute names using attributes(cv_carseats_sales)
cv_sd12_houses_table <- data.frame(
size = cv_sd12_houses$size,
error = cv_sd12_houses$dev
)
# plot the cv_carseats_sales_table
plot(
cv_sd12_houses_table,
xaxt = 'n',
yaxt = 'n'
)
par(mfrow = c(1,1))
# plot the tree
plot(tree_sd12_houses)
text(tree_sd12_houses, pretty = 0)
# prune the tree using cross-validation
cv_sd12_houses <- cv.tree(tree_sd12_houses, FUN=prune.misclass)
# create a table of tree size and classification error
#   note: the cross-validation object has an attribute dev for the classification error
#     you can check the attribute names using attributes(cv_carseats_sales)
cv_sd12_houses_table <- data.frame(
size = cv_sd12_houses$size,
error = cv_sd12_houses$dev
)
# plot the cv_carseats_sales_table
plot(
cv_sd12_houses_table,
xaxt = 'n',
yaxt = 'n'
)
axis(1, seq(1,max(cv_sd12_houses_table$size)))
axis(2, seq(0,2,1))
# plot the cv_carseats_sales_table
plot(
cv_sd12_houses_table,
xaxt = 'n',
yaxt = 'n'
)
axis(1, seq(1,max(cv_sd12_houses_table$size)))
axis(2, seq(0,2,1))
par(opar)
# plot the cv_carseats_sales_table
plot(
cv_sd12_houses_table,
xaxt = 'n',
yaxt = 'n'
)
axis(1, seq(1,max(cv_sd12_houses_table$size)))
axis(2, seq(0,2,1))
?par
par(pty = "m", mfrow = c(1,1))
opar <- par()
# plot the cv_carseats_sales_table
plot(
cv_sd12_houses_table,
xaxt = 'n',
yaxt = 'n'
)
axis(1, seq(1,max(cv_sd12_houses_table$size)))
axis(2, seq(0,2,1))
par(pty = "s")
# plot the cv_carseats_sales_table
plot(
cv_sd12_houses_table,
xaxt = 'n',
yaxt = 'n'
)
axis(1, seq(1,max(cv_sd12_houses_table$size)))
axis(2, seq(0,2,1))
# create a table of tree size and classification error
#   note: the cross-validation object has an attribute dev for the classification error
#     you can check the attribute names using attributes(cv_carseats_sales)
cv_sd12_houses_table <- data.frame(
size = cv_sd12_houses$size,
error = cv_sd12_houses$dev
)
# plot the cv_carseats_sales_table
plot(
cv_sd12_houses_table,
xaxt = 'n',
yaxt = 'n'
)
axis(1, seq(1,max(cv_sd12_houses_table$size)))
axis(2, seq(0,2,1))
# plot the tree
plot(tree_sd12_houses)
text(tree_sd12_houses, pretty = 0)
# prune the tree to the required size
pruned_tree_sd12_houses <- prune.misclass(tree_sd12_houses, best = pruned_tree_size)
# inspect the pruned tree
summary(pruned_tree_sd12_houses)
# plot the tree
plot(pruned_tree_sd12_houses)
text(pruned_tree_sd12_houses, pretty = 0)
# compare the un/pruned trees
opar <- par()
par(mfrow = c(1,2))
plot(tree_sd12_houses)
text(tree_sd12_houses, pretty = 0)
plot(pruned_tree_sd12_houses)
text(pruned_tree_sd12_houses, pretty = 0)
par(opar)
# compute the prediction for un/pruned trees
#   note: the Sales attribute (column 1) is excluded from the test data set
tree_sd12_houses_pred <- predict(tree_sd12_houses, test_sd12_houses_tree[,-1], type= "class")
pruned_tree_sd12_houses_pred <- predict(pruned_tree_sd12_houses, test_sd12_houses_tree[,-1], type= "class")
# create a table with actual values and the two predictions
sd12_houses_results <- data.frame(
actual = test_sd12_houses_tree$zipcode,
unpruned = tree_sd12_houses_pred,
pruned = pruned_tree_sd12_houses_pred
)
# create a contingency table for the actual VS predicted for both predictions
unpruned_results_table <- table(sd12_houses_results[,c('actual', 'unpruned')])
unpruned_results_table
pruned_results_table <- table(sd12_houses_results[,c('actual', 'pruned')])
pruned_results_table
# calculate accuracy from each contigency table
#   as sum of diagonal elements over sum of the matrix values
acc_unpruned <- sum(diag(unpruned_results_table)) / sum(unpruned_results_table)
acc_unpruned
acc_pruned <- sum(diag(pruned_results_table)) / sum(pruned_results_table)
acc_pruned
# plot actual vs predicted values for the worst (blue) and best predictor (orange)
#   note: points is used to add points on a graph
opar <- par()
plot(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_1hl,
col = 'steelblue2',
xlab = 'actual zipcode',
ylab = 'predicted zipcode',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)/25
)
points(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_Nohl,
col = 'orange',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)/50
)
abline(a = 0, b = 1, col = 'red', lty = 'dashed')
legend(
'bottomright',
c('nn_1hl', 'nn_Nohl'),
pch = 20,
col = c('steelblue2', 'orange'),
bty = 'n',
horiz = TRUE
)
par(opar)
# plot actual vs predicted values for the worst (blue) and best predictor (orange)
#   note: points is used to add points on a graph
opar <- par()
plot(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_1hl,
col = 'steelblue2',
xlab = 'actual zipcode',
ylab = 'predicted zipcode',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)/25
)
points(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_Nohl,
col = 'orange',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)/50
)
par(mfrow = c(1,1))
# plot actual vs predicted values for the worst (blue) and best predictor (orange)
#   note: points is used to add points on a graph
opar <- par()
plot(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_1hl,
col = 'steelblue2',
xlab = 'actual zipcode',
ylab = 'predicted zipcode',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)/25
)
points(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_Nohl,
col = 'orange',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)/50
)
abline(a = 0, b = 1, col = 'red', lty = 'dashed')
legend(
'bottomright',
c('nn_1hl', 'nn_Nohl'),
pch = 20,
col = c('steelblue2', 'orange'),
bty = 'n',
horiz = TRUE
)
par(opar)
dev.off()
# plot the three neural networks and compare their structure
plot(sd12_houses_nn_Nohl)
plot(sd12_houses_nn_1hl)
# plot actual vs predicted values for the worst (blue) and best predictor (orange)
#   note: points is used to add points on a graph
opar <- par()
plot(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_1hl,
col = 'steelblue2',
xlab = 'actual zipcode',
ylab = 'predicted zipcode',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)/25
)
points(
sd12_houses_nn_results$actual,
sd12_houses_nn_results$nn_Nohl,
col = 'orange',
pch = 20,
cex = table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_Nohl)/50
)
abline(a = 0, b = 1, col = 'red', lty = 'dashed')
legend(
'bottomright',
c('nn_1hl', 'nn_Nohl'),
pch = 20,
col = c('steelblue2', 'orange'),
bty = 'n',
horiz = TRUE
)
par(opar)
# plot the cv_carseats_sales_table
plot(
cv_sd12_houses_table,
xaxt = 'n',
yaxt = 'n'
)
axis(1, seq(1,max(cv_sd12_houses_table$size)))
axis(2, seq(0,2,1))
# compare the un/pruned trees
opar <- par()
par(mfrow = c(1,2))
plot(tree_sd12_houses)
text(tree_sd12_houses, pretty = 0)
plot(pruned_tree_sd12_houses)
text(pruned_tree_sd12_houses, pretty = 0)
par(opar)
install.packages('caret')
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
library(ggplot2)
library(lattice)
tree_confmat <- confusionMatrix(data = tree_sd12_houses_pred, reference = test_sd12_houses_tree$zipcode, positive = "True")
rf_confmat <- confusionMatrix(data = pruned_tree_sd12_houses_pred, reference = pruned_tree_sd12_houses_pred, positive = "True")
tree_confmat
rf_confmat
acc_pruned
acc_unpruned
rf_confmat <- confusionMatrix(data = pruned_tree_sd12_houses_pred, reference = test_sd12_houses_tree$zipcode, positive = "True")
rf_confmat
# calculate the correlation between actual and predicted values to identify the best predictor
cor(sd12_houses_nn_results[,'actual'], sd12_houses_nn_results[,c("nn_Nohl","nn_1hl")])
cor(val_dataframe[,'actual'], val_dataframe[,'nn_1hl'])
# calculate the correlation between actual and predicted values to identify the best predictor
cor(sd12_houses_nn_results[,'actual'], sd12_houses_nn_results[,c("nn_Nohl","nn_1hl")])
table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)
nn_1hl_table <- table(sd12_houses_nn_results$actual, sd12_houses_nn_results$nn_1hl)
nn_confmat <- confusionMatrix(data = pred_1hl, reference = test_sd12_houses_minmax$zipcode, positive = "True")
nn_confmat <- confusionMatrix(data = as.factor(pred_1hl), reference = test_sd12_houses_minmax$zipcode, positive = "True")
nn_confmat <- confusionMatrix(data = pred_1hl, reference = as.numeric(test_sd12_houses_minmax$zipcode), positive = "True")
acc_bb <- sum(diag(nn_1hl_table)) / sum(nn_1hl_table)
acc_nn <- sum(diag(nn_1hl_table)) / sum(nn_1hl_table)
acc_nn
